# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-06-17 21:10
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='GravityLogPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gravity', models.DecimalField(decimal_places=11, help_text='The current (loggable) sensor gravity', max_digits=13)),
                ('temp', models.DecimalField(decimal_places=10, help_text='The current (loggable) temperature', max_digits=13, null=True)),
                ('temp_format', models.CharField(choices=[('C', 'Celsius'), ('F', 'Fahrenheit')], default='F', max_length=1)),
                ('temp_is_estimate', models.BooleanField(default=True, help_text='Is this temperature an estimate?')),
                ('extra_data', models.CharField(blank=True, help_text='Extra data/notes about this point', max_length=255, null=True)),
                ('log_time', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('gravity_latest', models.DecimalField(decimal_places=11, default=None, help_text='The latest gravity (without smoothing/filtering if applicable)', max_digits=13, null=True)),
                ('temp_latest', models.DecimalField(decimal_places=10, default=None, help_text='The latest temperature (without smoothing/filtering if applicable)', max_digits=13, null=True)),
            ],
            options={
                'managed': False,
                'verbose_name': 'Gravity Log Point',
                'ordering': ['log_time'],
                'verbose_name_plural': 'Gravity Log Points',
            },
        ),
        migrations.CreateModel(
            name='GravityLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('format', models.CharField(choices=[('C', 'Celsius'), ('F', 'Fahrenheit')], default='F', max_length=1)),
                ('model_version', models.IntegerField(default=1)),
                ('display_extra_data_as_annotation', models.BooleanField(default=False, help_text='Should any extra data be displayed as a graph annotation?')),
            ],
        ),
        migrations.CreateModel(
            name='GravitySensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique name for this device', max_length=48, unique=True)),
                ('temp_format', models.CharField(choices=[('F', 'Fahrenheit'), ('C', 'Celsius')], default='F', help_text='Temperature units', max_length=1)),
                ('sensor_type', models.CharField(choices=[('tilt', 'Tilt Hydrometer'), ('ispindel', 'iSpindel'), ('manual', 'Manual')], default='manual', help_text='Type of gravity sensor used', max_length=10)),
                ('status', models.CharField(choices=[('active', 'Active, Managed by Circus'), ('unmanaged', 'Active, NOT managed by Circus'), ('disabled', 'Explicitly disabled, cannot be launched'), ('updating', 'Disabled, pending an update')], default='active', help_text='Status of the gravity sensor (used by scripts that interact with it)', max_length=15)),
            ],
            options={
                'verbose_name': 'Gravity Sensor',
                'verbose_name_plural': 'Gravity Sensors',
            },
        ),
        migrations.CreateModel(
            name='IspindelGravityCalibrationPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('angle', models.DecimalField(decimal_places=7, max_digits=10, verbose_name='Angle (Measured by Device)')),
                ('gravity', models.DecimalField(decimal_places=4, max_digits=8, verbose_name='Gravity Value (Measured Manually)')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='TiltBridge',
            fields=[
                ('name', models.CharField(help_text='Name to identify this TiltBridge', max_length=64)),
                ('mdns_id', models.CharField(help_text="mDNS ID used by the TiltBridge to identify itself both on your network and to Fermentrack. NOTE - Prefix only - do not include '.local'", max_length=64, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(regex='^[a-zA-Z0-9]+$')])),
            ],
            options={
                'verbose_name': 'TiltBridge',
                'verbose_name_plural': 'TiltBridges',
            },
        ),
        migrations.CreateModel(
            name='TiltGravityCalibrationPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actual_gravity', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='Actual (Correct) Gravity value')),
                ('tilt_measured_gravity', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='Tilt Measured Gravity Value')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='TiltTempCalibrationPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orig_value', models.DecimalField(decimal_places=4, help_text='Original (Sensor) Temp Value', max_digits=8, verbose_name='Original (Sensor) Temp Value')),
                ('actual_value', models.DecimalField(decimal_places=4, help_text='Actual (Measured) Temp Value', max_digits=8, verbose_name='Actual (Measured) Temp Value')),
                ('temp_format', models.CharField(choices=[('F', 'Fahrenheit'), ('C', 'Celsius')], default='F', max_length=1)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='IspindelConfiguration',
            fields=[
                ('sensor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ispindel_configuration', serialize=False, to='gravity.GravitySensor')),
                ('name_on_device', models.CharField(help_text='The name configured on the iSpindel device itself', max_length=64, unique=True)),
                ('third_degree_coefficient', models.FloatField(default=0.0, help_text='The third degree coefficient in the gravity conversion equation')),
                ('second_degree_coefficient', models.FloatField(default=0.0, help_text='The second degree coefficient in the gravity conversion equation')),
                ('first_degree_coefficient', models.FloatField(default=0.0, help_text='The first degree coefficient in the gravity conversion equation')),
                ('constant_term', models.FloatField(default=0.0, help_text='The constant term in the gravity conversion equation')),
                ('coefficients_up_to_date', models.BooleanField(default=False, help_text='Have the calibration points changed since the coefficient calculator was run?')),
            ],
        ),
        migrations.CreateModel(
            name='TiltConfiguration',
            fields=[
                ('sensor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='tilt_configuration', serialize=False, to='gravity.GravitySensor')),
                ('color', models.CharField(choices=[('Black', 'Black'), ('Orange', 'Orange'), ('Green', 'Green'), ('Blue', 'Blue'), ('Purple', 'Purple'), ('Red', 'Red'), ('Yellow', 'Yellow'), ('Pink', 'Pink')], help_text='The color of Tilt Hydrometer being used', max_length=32, unique=True)),
                ('smoothing_window_vals', models.IntegerField(default=70, help_text='Number of readings to include in the smoothing window.')),
                ('polling_frequency', models.IntegerField(default=15, help_text='How frequently Fermentrack should update the temp/gravity reading')),
                ('connection_type', models.CharField(choices=[('Bluetooth', 'Bluetooth'), ('Bridge', 'TiltBridge')], default='Bluetooth', help_text='How should Fermentrack connect to this Tilt?', max_length=32)),
                ('grav_second_degree_coefficient', models.FloatField(default=0.0, help_text='The second degree coefficient in the gravity calibration equation')),
                ('grav_first_degree_coefficient', models.FloatField(default=1.0, help_text='The first degree coefficient in the gravity calibration equation')),
                ('grav_constant_term', models.FloatField(default=0.0, help_text='The constant term in the gravity calibration equation')),
                ('coefficients_up_to_date', models.BooleanField(default=True, help_text='Have the calibration points changed since the coefficient calculator was run?')),
                ('tiltbridge', models.ForeignKey(default=None, help_text='TiltBridge device to use (if any)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gravity.TiltBridge')),
            ],
        ),
        migrations.AddField(
            model_name='gravitysensor',
            name='active_log',
            field=models.ForeignKey(blank=True, default=None, help_text='The currently active log of readings', null=True, on_delete=django.db.models.deletion.CASCADE, to='gravity.GravityLog'),
        ),
        migrations.AddField(
            model_name='gravitysensor',
            name='assigned_brewpi_device',
            field=models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gravity_sensor', to='app.BrewPiDevice'),
        ),
        migrations.AddField(
            model_name='gravitylog',
            name='device',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='gravity.GravitySensor'),
        ),
        migrations.AddField(
            model_name='tilttempcalibrationpoint',
            name='sensor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gravity.TiltConfiguration'),
        ),
        migrations.AddField(
            model_name='tiltgravitycalibrationpoint',
            name='sensor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gravity.TiltConfiguration'),
        ),
        migrations.AddField(
            model_name='ispindelgravitycalibrationpoint',
            name='sensor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gravity.IspindelConfiguration'),
        ),
    ]
